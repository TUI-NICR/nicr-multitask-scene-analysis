stages:
  - stylecheck
  - test
  - deploy

.conda_env: &conda_env
    before_script:
        # update conda
        - conda config --set always_yes yes
        - conda update -q conda

        # create and activate environment
        - conda create -q -n testenv_${CI_JOB_ID}_py${PYTHON_VERSION_TO_USE//./} python=${PYTHON_VERSION_TO_USE} pip
        - source activate testenv_${CI_JOB_ID}_py${PYTHON_VERSION_TO_USE//./}

    after_script:
        # remove environment
        - conda env remove --name testenv_${CI_JOB_ID}_py${PYTHON_VERSION_TO_USE//./}

.test_template: &test_template
    <<: *conda_env
    stage: test
    rules:
        - if: $CI_MERGE_REQUEST_TITLE =~ /^(Draft:|WIP:|\[Draft\]|\[WIP\])/
          when: manual
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE !~ /^(Draft:|WIP:|\[Draft\]|\[WIP\])/
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        - if: $CI_PIPELINE_SOURCE == "schedule"
    script:
        # install packages (use conda to avoid time-consuming installations)
        - conda install -q pytest pytest-cov
        - pip install -q pytest-html
        - pip install pytest-xdist    # multiple workers for pytest (-n 2 below)

        # install dependencies
        - conda install pytorch=1.10.0 torchvision=0.11.1 cudatoolkit=11.3 -c pytorch
        - pip install 'opencv-python>=4.2.0.34'

        # install package (and all missing dependencies)
        - pip install -q --editable .[test]

        # check conda installation
        - conda info
        - conda list
        - pip list

        # run test
        - py.test ./ -vv -rx -s -n 2 --maxfail=4 --ff

style_check:
    <<: *conda_env
    stage: stylecheck
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
    variables:
        PYTHON_VERSION_TO_USE: "3.8"
    script:
        # install packages
        - conda install -q pycodestyle pylint

        # check style using pep8
        - find ./ -name "*.py" | xargs pycodestyle --show-source --show-pep8

        # check style using pylint (without taking into account)
        - pylint nicr_mt_scene_analysis --rcfile=${CI_PROJECT_DIR}/.pylintrc || true

tests_py36:
    <<: *test_template
    variables:
        PYTHON_VERSION_TO_USE: "3.6"
        REPORT_COVERAGE: "false"

tests_py37:
    <<: *test_template
    variables:
        PYTHON_VERSION_TO_USE: "3.7"
        REPORT_COVERAGE: "false"

tests_py38:
    <<: *test_template
    variables:
        PYTHON_VERSION_TO_USE: "3.8"
        REPORT_COVERAGE: "true"

tests_py39:
    <<: *test_template
    variables:
        PYTHON_VERSION_TO_USE: "3.9"
        REPORT_COVERAGE: "false"

update_pip_package:
    stage: deploy
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
          when: never
        - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
          when: manual
    script:
        - pip install twine

        # build package
        - python setup.py sdist bdist_wheel

        # upload package
        - export TWINE_USERNAME=${TWINE_USERNAME}
        - export TWINE_PASSWORD=${TWINE_PASSWORD}
        - python -m twine upload --skip-existing --repository-url ${CI_API_V4_URL}/projects/${PACKAGE_REGISTRY}/packages/pypi dist/*
